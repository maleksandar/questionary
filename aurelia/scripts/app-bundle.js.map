{"version":3,"sources":["app.js","environment.js","main.js","pages/home.js","pages/login.js","pages/logout.js","pages/question-details.js","pages/questions.js","pages/signup.js","resources/index.js","services/auth.js","resources/elements/question-form.js","resources/elements/question-list.js","resources/elements/question.js","resources/elements/answer.js","dialogs/login.js","dialogs/signup.js"],"names":["App","auth","dialogService","configureRouter","config","router","title","map","route","moduleId","nav","name","loginModal","open","viewModel","signupModal","debug","testing","configure","Promise","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","plugin","developmentLogging","configureContainer","container","start","then","setRoot","http","useStandardConfiguration","withBaseUrl","withDefaults","credentials","headers","withInterceptor","request","console","log","method","url","response","status","registerInstance","Home","canActivate","isLogedIn","Login","httpClient","dialogController","login","email","password","close","catch","loginError","fetch","json","Logout","logout","reason","QuestionDetails","activate","params","routeConfig","questionPromise","id","questionDetail","questionContent","question","navModel","setTitle","headline","answerPromise","answers","all","Questions","Signup","signup","body","navigate","globalResources","Auth","sessionStorage","getItem","currentUser","userId","role","userinfo","setItem","user_id","toastr","QuestionForm","tags","tag","postQuestion","tagObjects","text","Tags","success","serverError","removeTag","tagText","index","indexOf","splice","addTag","push","QuestionList","qss","pageIndexes","qssIsNotEmpty","questions","length","currentIndex","Array","from","x","i","valueChanged","newValue","oldValue","setPage","Question","quickAnswer","answerText","QuestionId","content","_id","deleteQuestion","parseInt","createdByUserId","Answer"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import { Auth } from './services/auth';\r\nimport { inject } from 'aurelia-framework';\r\nimport { DialogService } from 'aurelia-dialog';\r\nimport { Login } from './dialogs/login';\r\nimport { Signup } from './dialogs/signup';\r\n\r\n\r\n@inject(Auth, DialogService)\r\nexport class App {\r\n  constructor(auth, dialogService) {\r\n    this.auth = auth;\r\n    this.dialogService = dialogService;\r\n  }\r\n\r\n  configureRouter(config, router){\r\n    config.title = 'Questionary';\r\n    config.map([\r\n      { route: '',       moduleId: 'pages/questions', title: 'Questions' },\r\n      { route: 'home',   moduleId: 'pages/home',      title: 'Home', nav: false },\r\n      // { route: 'login',  moduleId: 'pages/login',     name: 'login', title: 'Log in' },\r\n      // { route: 'logout', moduleId: 'pages/logout',    name: 'logout', title: 'Log out' },\r\n      // { route: 'signup', moduleId: 'pages/signup',    name: 'signup', title: 'Sign up' },\r\n      { route: 'question/:id', moduleId: 'pages/question-details', name: 'question-details', title: 'Question' },\r\n    ]);\r\n    this.router = router;\r\n  }\r\n\r\n  loginModal() {\r\n    this.dialogService.open({ viewModel: Login });\r\n  }\r\n\r\n  signupModal() {\r\n    this.dialogService.open({ viewModel: Signup });\r\n  }\r\n}\r\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\r\nimport {HttpClient} from 'aurelia-fetch-client';\r\n\r\n//Configure Bluebird Promises.\r\nPromise.config({\r\n  longStackTraces: environment.debug,\r\n  warnings: {\r\n    wForgottenReturn: false\r\n  }\r\n});\r\n\r\nexport function configure(aurelia) {\r\n  aurelia.use\r\n    .standardConfiguration()\r\n    .feature('resources')\r\n    .plugin('aurelia-dialog');\r\n\r\n  if (environment.debug) {\r\n    aurelia.use\r\n      .developmentLogging();\r\n  }\r\n\r\n  if (environment.testing) {\r\n    aurelia.use.plugin('aurelia-testing');\r\n  }\r\n\r\n  configureContainer(aurelia.container);\r\n\r\n  aurelia.start().then(() => aurelia.setRoot());\r\n}\r\n\r\nfunction configureContainer(container) {\r\n  let http = new HttpClient();\r\n  http.configure(config => {\r\n    config\r\n      .useStandardConfiguration()\r\n      .withBaseUrl('api/')\r\n      .withDefaults({\r\n        credentials: 'same-origin',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'X-Requested-With': 'Fetch'\r\n        }\r\n      });\r\n      if (environment.debug) {\r\n        config.withInterceptor({\r\n          request(request) {\r\n            console.log(`Requesting ${request.method} ${request.url}`);\r\n            return request;\r\n          },\r\n          response(response) {\r\n            console.log(`Received ${response.status} ${response.url}`);\r\n            return response;\r\n          }\r\n        });\r\n    }\r\n  });\r\n  container.registerInstance(HttpClient, http); // DI setup.\r\n}","import {Auth} from '../services/auth';\r\nimport {inject} from 'aurelia-framework';\r\n\r\n@inject(Auth)\r\nexport class Home {\r\n  constructor(auth) {\r\n    this.auth = auth;\r\n  }\r\n\r\n  canActivate() {\r\n    return this.auth.isLogedIn;\r\n  }\r\n}","import {inject} from 'aurelia-framework';\r\nimport {Router} from 'aurelia-router';\r\nimport {HttpClient} from 'aurelia-fetch-client';\r\nimport {Auth} from '../services/auth';\r\nimport {DialogController} from 'aurelia-dialog';\r\n\r\n@inject(Auth, Router, HttpClient, DialogController)\r\nexport class Login {\r\n  constructor(auth, router, httpClient, dialogController) {\r\n    this.auth = auth;\r\n    this.router = router;\r\n    this.httpClient = httpClient;\r\n    this.dialogController = dialogController;\r\n  }\r\n\r\n  login() {\r\n    this.auth.login(this.email, this.password)\r\n      .then(() => {\r\n        this.dialogController.close();\r\n        // this.router.navigate(\"\");\r\n      })\r\n      .catch(() => this.loginError = true)\r\n      .then(() => {\r\n        if(!this.loginError) {\r\n          this.httpClient.fetch('users/me')\r\n            .then(response => response.json());\r\n        }\r\n      });\r\n  }\r\n}","import {inject} from 'aurelia-framework';\r\nimport {Router} from 'aurelia-router';\r\nimport {Auth} from '../services/auth';\r\nimport {DialogController} from 'aurelia-dialog';\r\n\r\n@inject(Auth, DialogController)\r\nexport class Logout {\r\n  constructor(auth, dialogController) {\r\n    this.auth = auth;\r\n    this.dialogController = dialogController;\r\n  }\r\n\r\n  logout() {\r\n    this.auth.logout().then(() => {\r\n      console.log('loging out', this.dialogController);\r\n      this.dialogController.close();\r\n    }).catch(reason => console.log(reason));\r\n  \r\n  } \r\n}","import { inject } from 'aurelia-framework';\r\nimport { HttpClient, json } from 'aurelia-fetch-client';\r\nimport {Router} from 'aurelia-router';\r\n\r\n\r\n@inject(HttpClient)\r\nexport class QuestionDetails {\r\n  constructor(httpClient) {\r\n    this.httpClient = httpClient;\r\n  }\r\n\r\n  activate(params, routeConfig) {\r\n    this.routeConfig = routeConfig;\r\n\r\n    var questionPromise = this.httpClient.fetch(`questions/${params.id}?include=Tags&include=Answers`)\r\n      .then(questionDetail => questionDetail.json())\r\n      .then(question => { \r\n        this.questionContent = question; \r\n        this.routeConfig.navModel.setTitle(question.headline);\r\n      console.log(question);\r\n      });\r\n\r\n    var answerPromise = this.httpClient.fetch(`answers/question/${params.id}`)\r\n      .then(response => response.json())\r\n      .then(answers => { \r\n        this.answers = answers; \r\n      console.log(answers);\r\n        \r\n      });\r\n\r\n    return Promise.all([questionPromise, answerPromise]);\r\n  }\r\n}","\r\nexport class Questions {\r\n}","import {bindable, inject} from 'aurelia-framework';\r\nimport {HttpClient, json} from 'aurelia-fetch-client';\r\nimport {Router} from 'aurelia-router';\r\nimport {DialogController} from 'aurelia-dialog';\r\n\r\n\r\n@inject(HttpClient, Router, DialogController)\r\nexport class Signup {\r\n  constructor(httpClient, router, dialogController) {\r\n    this.httpClient = httpClient;\r\n    this.router = router;\r\n    this.dialogController = dialogController;\r\n  }\r\n\r\n  signup() {\r\n    this.httpClient.fetch('users', {\r\n      method: 'post',\r\n      body: json({ name: this.name, email: this.email, password: this.password })\r\n    }).then(() => {\r\n      this.dialogController.close();\r\n      this.router.navigate(\"\");\r\n    });\r\n  }\r\n}","export function configure(config) {\r\n  config.globalResources(['./elements/question-list',\r\n                          './elements/question-form']);\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport {HttpClient, json} from 'aurelia-fetch-client';\r\n\r\n@inject(HttpClient)\r\nexport class Auth {\r\n  constructor(httpClient) {\r\n    this.httpClient = httpClient;\r\n    this.isLogedIn = sessionStorage.getItem(\"logedIn\") === \"true\";\r\n    this.currentUser = { userId: sessionStorage.getItem(\"userId\"), role: sessionStorage.getItem(\"role\") }\r\n    console.log('auth constructor', this.currentUser);\r\n  }\r\n\r\n  login(email, password) {\r\n    return this.httpClient.fetch('auth/login', {\r\n      method: 'post',\r\n      body: json({ email: email, password: password })\r\n    })\r\n    .then(response => response.json())\r\n    .then(userinfo => {\r\n      console.log(userinfo);\r\n      // sessionStorage can only save strings not bools.\r\n      sessionStorage.setItem('logedIn', \"true\");\r\n      this.isLogedIn = true;\r\n      this.currentUser.userId = userinfo.user_id;\r\n      sessionStorage.setItem('userId', userinfo.user_id);\r\n      return userinfo;\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    sessionStorage.setItem('logedIn', \"false\");\r\n    this.isLogedIn = false;\r\n    this.currentUser.userId = \"\";\r\n    sessionStorage.setItem('userId', \"\");\r\n    return this.httpClient.fetch('auth/logout', {\r\n      method: 'post'\r\n    });\r\n  }\r\n}","import {HttpClient, json} from 'aurelia-fetch-client';\r\nimport {inject} from 'aurelia-framework';\r\nimport {Router} from 'aurelia-router';\r\nvar toastr = require('toastr');\r\n\r\n\r\n@inject(HttpClient, Router, toastr)\r\nexport class QuestionForm {\r\n  constructor(httpClient, router, toastr) {\r\n    this.httpClient = httpClient;\r\n    this.router = router;\r\n    this.toastr = toastr;\r\n    this.tags = [];\r\n    this.tag = \"\";\r\n  }\r\n\r\n  postQuestion() {\r\n    var tagObjects = this.tags.map(tag => { return { text: tag }; })\r\n    return this.httpClient.fetch('questions', {\r\n      method: 'post',\r\n      body: json({ headline: this.headline, text: this.text, Tags: tagObjects })\r\n    })\r\n    .then(() => {\r\n      this.toastr.success('You have successfully posted your question');\r\n      this.router.navigate(\"\");\r\n    })\r\n    .catch(() => this.serverError = true);\r\n  }\r\n\r\n  removeTag(tagText) {\r\n    var index = this.tags.indexOf(tagText);\r\n    if (index > -1) {\r\n        this.tags.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  addTag() {\r\n    this.tags.push(this.tag);\r\n    this.tag = \"\";\r\n  }\r\n}","import {bindable, inject} from 'aurelia-framework';\r\nimport {HttpClient} from 'aurelia-fetch-client';\r\n\r\n@inject(HttpClient)\r\nexport class QuestionList {\r\n  @bindable value;\r\n\r\n  constructor(httpClient) {\r\n    this.httpClient = httpClient;\r\n    this.qss = [];\r\n    this.pageIndexes = [];\r\n    this.qssIsNotEmpty = false;\r\n\r\n    this.httpClient.fetch('questions?include=Answers&include=Tags')\r\n      .then(response => response.json())\r\n      .then(questions => {\r\n        this.questions = questions;\r\n        while(this.questions.length != 0)\r\n          this.qss.push(this.questions.splice(0,6));\r\n        this.qssIsNotEmpty = this.qss.length != 0;\r\n        if(this.qssIsNotEmpty) {\r\n          this.questions = this.qss[0];\r\n          this.currentIndex = 0;\r\n          this.pageIndexes = Array.from(new Array(this.qss.length), (x,i) => i);\r\n        }\r\n    });\r\n  }\r\n\r\n  valueChanged(newValue, oldValue) {\r\n    this.questions = this.qss[newValue];\r\n  }\r\n\r\n  setPage(index) {\r\n    this.currentIndex = index;\r\n  }\r\n}\r\n\r\n","import {bindable, inject, computedFrom } from 'aurelia-framework';\r\nimport {HttpClient, json} from 'aurelia-fetch-client';\r\nimport {Auth} from '../../services/auth';\r\nimport {DialogService} from 'aurelia-dialog';\r\n\r\nvar toastr = require('toastr');\r\n\r\n@inject(HttpClient, toastr, Auth, DialogService)\r\nexport class Question {\r\n  @bindable content;\r\n\r\n  constructor(httpClient, toastr, auth, dialogService) {\r\n    this.httpClient = httpClient;\r\n    this.toastr = toastr;\r\n    this.auth = auth;\r\n    this.dialogService = dialogService;\r\n  }\r\n\r\n  quickAnswer() {\r\n    this.httpClient.fetch('answers', { method: 'post', body: json({ text: this.answerText, QuestionId: this.content._id }) })\r\n      .then(() => {\r\n        this.answerText = \"\";\r\n        this.toastr.success('You have successfully posted your answer');\r\n      });\r\n  }\r\n  \r\n  @computedFrom('auth.currentUser.userId', 'content.createdByUserId')\r\n  get authorized() {\r\n    return parseInt(this.auth.currentUser.userId) === parseInt(this.content.createdByUserId);\r\n  }\r\n\r\n  @computedFrom('auth.isLogedIn')\r\n  get authenticated() {\r\n    return this.auth.isLogedIn;\r\n  }\r\n\r\n  deleteQuestion(question) {\r\n    // this.dialogService.open({viewModel: }); //Are you sure (confirm)\r\n  }\r\n}","import {bindable, inject, computedFrom } from 'aurelia-framework';\r\nimport {HttpClient, json} from 'aurelia-fetch-client';\r\nimport {Auth} from '../../services/auth';\r\n\r\n@inject(HttpClient, Auth)\r\nexport class Answer {\r\n  @bindable content;\r\n\r\n  constructor(httpClient, auth) {\r\n    this.httpClient = httpClient;\r\n    this.auth = auth;\r\n  }\r\n\r\n  @computedFrom('auth.currentUser.userId', 'content.createdByUserId')\r\n  get authorized() {\r\n    return parseInt(this.auth.currentUser.userId) === parseInt(this.content.createdByUserId);\r\n  }\r\n\r\n  @computedFrom('auth.isLogedIn')\r\n  get authenticated() {\r\n    return this.auth.isLogedIn;\r\n  }\r\n}","import {inject} from 'aurelia-framework';\r\nimport {Router} from 'aurelia-router';\r\nimport {HttpClient} from 'aurelia-fetch-client';\r\nimport {Auth} from '../services/auth';\r\nimport {DialogController} from 'aurelia-dialog';\r\n\r\n@inject(Auth, Router, HttpClient, DialogController)\r\nexport class Login {\r\n  constructor(auth, router, httpClient, dialogController) {\r\n    this.auth = auth;\r\n    this.router = router;\r\n    this.httpClient = httpClient;\r\n    this.dialogController = dialogController;\r\n  }\r\n\r\n  login() {\r\n    this.auth.login(this.email, this.password)\r\n      .then(() => {\r\n        this.dialogController.close();\r\n        // this.router.navigate(\"\");\r\n      })\r\n      .catch(() => this.loginError = true)\r\n      .then(() => {\r\n        if(!this.loginError) {\r\n          this.httpClient.fetch('users/me')\r\n            .then(response => response.json());\r\n        }\r\n      });\r\n  }\r\n}","import {bindable, inject} from 'aurelia-framework';\r\nimport {HttpClient, json} from 'aurelia-fetch-client';\r\nimport {Router} from 'aurelia-router';\r\nimport {DialogController} from 'aurelia-dialog';\r\n\r\n\r\n@inject(HttpClient, Router, DialogController)\r\nexport class Signup {\r\n  constructor(httpClient, router, dialogController) {\r\n    this.httpClient = httpClient;\r\n    this.router = router;\r\n    this.dialogController = dialogController;\r\n  }\r\n\r\n  signup() {\r\n    this.httpClient.fetch('users', {\r\n      method: 'post',\r\n      body: json({ name: this.name, email: this.email, password: this.password })\r\n    }).then(() => {\r\n      this.dialogController.close();\r\n      this.router.navigate(\"\");\r\n    });\r\n  }\r\n}"],"sourceRoot":"../src"}