{"version":3,"sources":["app.js","environment.js","main.js","resources/index.js","resources/elements/question-list.js"],"names":["App","message","debug","testing","configure","Promise","config","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","configureContainer","container","start","then","setRoot","http","useStandardConfiguration","withBaseUrl","withDefaults","credentials","headers","withInterceptor","request","console","log","method","url","response","status","registerInstance","QuestionList","httpClient","fetch","json","questions","valueChanged","newValue","oldValue"],"mappings":";;;;;;;;;;;;;MAAaA,cAAAA,MACX,eAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,cAAf;AACD;;;;;;;;oBCHY;AACbC,WAAO,IADM;AAEbC,aAAS;AAFI;;;;;;;;UCWCC,YAAAA;;;;;;;;;;AAPhBC,UAAQC,MAAR,CAAe;AACbC,qBAAiB,sBAAYL,KADhB;AAEbM,cAAU;AACRC,wBAAkB;AADV;AAFG,GAAf;;AAOO,WAASL,SAAT,CAAmBM,OAAnB,EAA4B;AACjCA,YAAQC,GAAR,CACGC,qBADH,GAEGC,OAFH,CAEW,WAFX;;AAIA,QAAI,sBAAYX,KAAhB,EAAuB;AACrBQ,cAAQC,GAAR,CAAYG,kBAAZ;AACD;;AAED,QAAI,sBAAYX,OAAhB,EAAyB;AACvBO,cAAQC,GAAR,CAAYI,MAAZ,CAAmB,iBAAnB;AACD;;AAEDC,uBAAmBN,QAAQO,SAA3B;;AAEAP,YAAQQ,KAAR,GAAgBC,IAAhB,CAAqB;AAAA,aAAMT,QAAQU,OAAR,EAAN;AAAA,KAArB;AACD;;AAED,WAASJ,kBAAT,CAA4BC,SAA5B,EAAuC;AACrC,QAAII,OAAO,oCAAX;AACAA,SAAKjB,SAAL,CAAe,kBAAU;AACvBE,aACGgB,wBADH,GAEGC,WAFH,CAEe,MAFf,EAGGC,YAHH,CAGgB;AACZC,qBAAa,aADD;AAEZC,iBAAS;AACP,oBAAU,kBADH;AAEP,8BAAoB;AAFb;AAFG,OAHhB;AAUE,UAAI,sBAAYxB,KAAhB,EAAuB;AACrBI,eAAOqB,eAAP,CAAuB;AACrBC,iBADqB,mBACbA,QADa,EACJ;AACfC,oBAAQC,GAAR,iBAA0BF,SAAQG,MAAlC,SAA4CH,SAAQI,GAApD;AACA,mBAAOJ,QAAP;AACD,WAJoB;AAKrBK,kBALqB,oBAKZA,SALY,EAKF;AACjBJ,oBAAQC,GAAR,eAAwBG,UAASC,MAAjC,SAA2CD,UAASD,GAApD;AACA,mBAAOC,SAAP;AACD;AARoB,SAAvB;AAUH;AACF,KAvBD;AAwBAhB,cAAUkB,gBAAV,iCAAuCd,IAAvC;AACD;;;;;;;;UCxDejB,YAAAA;AAAT,WAASA,SAAT,CAAmBE,MAAnB,EAA2B,CAEjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCEY8B,uBAAAA,uBADZ;AAIC,0BAAYC,UAAZ,EAAwB;AAAA;;AAAA;;AAAA;;AACtB,WAAKA,UAAL,GAAkBA,UAAlB;;AAEA,WAAKA,UAAL,CAAgBC,KAAhB,CAAsB,WAAtB,EACGnB,IADH,CACQ;AAAA,eAAYc,SAASM,IAAT,EAAZ;AAAA,OADR,EAEGpB,IAFH,CAEQ;AAAA,eAAa,MAAKqB,SAAL,GAAiBA,SAA9B;AAAA,OAFR;AAGD;;2BAEDC,qCAAaC,UAAUC,UAAU,CAEhC","file":"app-bundle.js","sourcesContent":["export class App {\n  constructor() {\n    this.message = 'Hello World!';\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\nimport {HttpClient} from 'aurelia-fetch-client';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  configureContainer(aurelia.container);\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n\nfunction configureContainer(container) {\n  let http = new HttpClient();\n  http.configure(config => {\n    config\n      .useStandardConfiguration()\n      .withBaseUrl('api/')\n      .withDefaults({\n        credentials: 'same-origin',\n        headers: {\n          'Accept': 'application/json',\n          'X-Requested-With': 'Fetch'\n        }\n      });\n      if (environment.debug) {\n        config.withInterceptor({\n          request(request) {\n            console.log(`Requesting ${request.method} ${request.url}`);\n            return request;\n          },\n          response(response) {\n            console.log(`Received ${response.status} ${response.url}`);\n            return response;\n          }\n        });\n    }\n  });\n  container.registerInstance(HttpClient, http); // DI setup.\n}","export function configure(config) {\n  //config.globalResources([]);\n}\n","import {bindable, inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-fetch-client';\n\n@inject(HttpClient)\nexport class QuestionList {\n  @bindable value;\n\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n\n    this.httpClient.fetch('questions')\n      .then(response => response.json())\n      .then(questions => this.questions = questions);\n  }\n\n  valueChanged(newValue, oldValue) {\n\n  }\n}\n\n"],"sourceRoot":"../src"}